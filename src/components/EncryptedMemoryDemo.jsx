import React, { useState, useEffect } from 'react';
import { useEncryptedMemory, useAutoSaveConversation, useDownloadableFiles } from '../hooks/useEncryptedMemory';
import { 
  createAutoSaveHandler, 
  createMemoryAwareHandlers, 
  withMemoryIntegration,
  memorySearch,
  memoryUtils
} from '../utils/encryptedMemoryIntegration';
import EncryptedMemoryManager, { MemoryStatusCompact } from './EncryptedMemoryManager';

/**
 * Demonstration component showing how to integrate encrypted memory
 * into existing components without modifying their core logic
 */
const EncryptedMemoryDemo = () => {
  const [activeDemo, setActiveDemo] = useState('overview');
  const [demoConversationId] = useState(`demo-${Date.now()}`);
  const [userInput, setUserInput] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [folderPath, setFolderPath] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const memory = useEncryptedMemory();
  const { autoSave } = useAutoSaveConversation(demoConversationId);
  const { createAndDownload } = useDownloadableFiles();
  const handlers = createMemoryAwareHandlers();

  // Demo: Auto-save conversation
  const handleSendMessage = async () => {
    if (!userInput.trim()) return;

    const userMessage = userInput;
    const assistantResponse = `Demo response to: "${userMessage}". This is automatically saved to encrypted memory.`;

    // Add to local chat history
    const newMessage = {
      id: Date.now(),
      user: userMessage,
      assistant: assistantResponse,
      timestamp: new Date().toLocaleString()
    };
    setChatHistory(prev => [...prev, newMessage]);

    // Auto-save to encrypted memory
    await autoSave(userMessage, assistantResponse, {
      demo: true,
      source: 'demo-chat'
    });

    setUserInput('');
  };

  // Demo: Memory-aware API handler
  const handleApiCall = handlers.wrapApiHandler(
    async (endpoint) => {
      const { getWooCommerceData, getZendeskData } = useStore.getState();
      let response;
      if (endpoint === '/woocommerce/orders') {
        response = await getWooCommerceData('orders');
      } else if (endpoint === '/zendesk/tickets') {
        response = await getZendeskData('tickets');
      } else {
        throw new Error('Unsupported endpoint');
      }
      return {
        endpoint,
        timestamp: new Date().toISOString(),
        data: response
      };
    },
    { autoSave: true, filename: 'api-result', fileType: 'json' }
  );

  // Demo: Memory-aware folder handler
  const handleFolderSelection = handlers.wrapFolderHandler(
    async (path) => {
      // Simulate folder processing
      return {
        path,
        files: Math.floor(Math.random() * 100) + 1,
        size: Math.floor(Math.random() * 1000) + 100
      };
    }
  );

  // Demo: Search memory
  const handleSearch = async () => {
    if (!searchQuery.trim()) return;
    
    try {
      const results = await memorySearch.searchConversations(searchQuery);
      setSearchResults(results);
    } catch (error) {
      console.error('Search failed:', error);
    }
  };

  // Demo: Generate and download file
  const handleGenerateFile = async () => {
    const demoData = {
      timestamp: new Date().toISOString(),
      chatHistory,
      memoryStats: memory.stats,
      demoInfo: 'This file was generated by the encrypted memory demo'
    };

    await createAndDownload(demoData, 'demo-export', 'json');
  };

  return (
    <div className="encrypted-memory-demo">
      <div className="demo-header">
        <h2>🧠 Encrypted Memory System Demo</h2>
        <p>This demonstrates how to integrate encrypted memory into existing components without modification.</p>
        
        {/* Compact memory status */}
        <MemoryStatusCompact 
          stats={memory.stats}
          isInitialized={memory.isInitialized}
          error={memory.error}
          className="demo-status"
        />
      </div>

      <div className="demo-tabs">
        {['overview', 'chat', 'api', 'folders', 'search', 'manager'].map(tab => (
          <button
            key={tab}
            className={`demo-tab ${activeDemo === tab ? 'active' : ''}`}
            onClick={() => setActiveDemo(tab)}
          >
            {tab.charAt(0).toUpperCase() + tab.slice(1)}
          </button>
        ))}
      </div>

      <div className="demo-content">
        {activeDemo === 'overview' && (
          <DemoOverview 
            stats={memory.stats}
            isInitialized={memory.isInitialized}
          />
        )}

        {activeDemo === 'chat' && (
          <DemoChat
            userInput={userInput}
            setUserInput={setUserInput}
            chatHistory={chatHistory}
            onSendMessage={handleSendMessage}
            conversationId={demoConversationId}
          />
        )}

        {activeDemo === 'api' && (
          <DemoApi
            onApiCall={handleApiCall}
            onGenerateFile={handleGenerateFile}
          />
        )}

        {activeDemo === 'folders' && (
          <DemoFolders
            folderPath={folderPath}
            setFolderPath={setFolderPath}
            onFolderSelect={handleFolderSelection}
          />
        )}

        {activeDemo === 'search' && (
          <DemoSearch
            searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}
            searchResults={searchResults}
            onSearch={handleSearch}
          />
        )}

        {activeDemo === 'manager' && (
          <EncryptedMemoryManager className="demo-manager" />
        )}
      </div>
    </div>
  );
};

// Demo overview component
const DemoOverview = ({ stats, isInitialized }) => {
  const usage = memoryUtils.calculateMemoryUsage(stats);
  
  return (
    <div className="demo-overview">
      <div className="overview-section">
        <h3>🎯 Integration Features</h3>
        <div className="feature-grid">
          <div className="feature-card">
            <h4>🔄 Auto-Save</h4>
            <p>Conversations automatically saved to encrypted SQLite database</p>
            <code>useAutoSaveConversation(conversationId)</code>
          </div>
          
          <div className="feature-card">
            <h4>📁 Folder Tracking</h4>
            <p>User-selected folder paths stored with metadata</p>
            <code>memory.addFolderPath(path, metadata)</code>
          </div>
          
          <div className="feature-card">
            <h4>📄 File Generation</h4>
            <p>Auto-expiring downloadable files (2-hour TTL)</p>
            <code>createAndDownload(data, filename, type)</code>
          </div>
          
          <div className="feature-card">
            <h4>🔍 Smart Search</h4>
            <p>Full-text search across all stored conversations</p>
            <code>memorySearch.searchConversations(query)</code>
          </div>
        </div>
      </div>
      
      <div className="overview-section">
        <h3>📊 Current Stats</h3>
        <div className="stats-display">
          <div className="stat-item">
            <span className="stat-label">Status:</span>
            <span className={`stat-value ${isInitialized ? 'success' : 'warning'}`}>
              {isInitialized ? '✅ Active' : '⏳ Initializing'}
            </span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Conversations:</span>
            <span className="stat-value">{usage.conversations}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Messages:</span>
            <span className="stat-value">{usage.messages}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Database Size:</span>
            <span className="stat-value">{usage.dbSizeMB} MB</span>
          </div>
        </div>
      </div>
      
      <div className="overview-section">
        <h3>🔒 Security Features</h3>
        <ul className="security-list">
          <li>✅ SQLCipher AES-256 encryption</li>
          <li>✅ Automatic key management (no passwords)</li>
          <li>✅ Windows Credential Manager integration</li>
          <li>✅ Local-only storage (no cloud sync)</li>
          <li>✅ No metadata obfuscation (transparent storage)</li>
        </ul>
      </div>
    </div>
  );
};

// Demo chat component
const DemoChat = ({ userInput, setUserInput, chatHistory, onSendMessage, conversationId }) => {
  return (
    <div className="demo-chat">
      <div className="chat-info">
        <h3>💬 Auto-Save Chat Demo</h3>
        <p>Messages are automatically saved to encrypted memory. Conversation ID: <code>{conversationId}</code></p>
      </div>
      
      <div className="chat-history">
        {chatHistory.map(message => (
          <div key={message.id} className="chat-message">
            <div className="message-user">
              <strong>You:</strong> {message.user}
            </div>
            <div className="message-assistant">
              <strong>Assistant:</strong> {message.assistant}
            </div>
            <div className="message-timestamp">{message.timestamp}</div>
          </div>
        ))}
      </div>
      
      <div className="chat-input">
        <input
          type="text"
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
          placeholder="Type a message to test auto-save..."
          onKeyPress={(e) => e.key === 'Enter' && onSendMessage()}
        />
        <button onClick={onSendMessage}>Send & Save</button>
      </div>
    </div>
  );
};

// Demo API component
const DemoApi = ({ onApiCall, onGenerateFile }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [lastResult, setLastResult] = useState(null);
  
  const handleApiCall = async (endpoint) => {
    setIsLoading(true);
    try {
      const result = await onApiCall(endpoint);
      setLastResult(result);
    } catch (error) {
      console.error('API call failed:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="demo-api">
      <div className="api-info">
        <h3>🔌 Memory-Aware API Demo</h3>
        <p>API calls are wrapped to automatically generate downloadable files with results.</p>
      </div>
      
      <div className="api-buttons">
        <button 
          onClick={() => handleApiCall('/woocommerce/orders')} 
          disabled={isLoading}
        >
          {isLoading ? '⏳ Calling...' : '🛒 Mock WooCommerce API'}
        </button>
        
        <button 
          onClick={() => handleApiCall('/zendesk/tickets')} 
          disabled={isLoading}
        >
          {isLoading ? '⏳ Calling...' : '🎫 Mock Zendesk API'}
        </button>
        
        <button onClick={onGenerateFile}>
          📄 Generate Demo File
        </button>
      </div>
      
      {lastResult && (
        <div className="api-result">
          <h4>Last API Result:</h4>
          <pre>{JSON.stringify(lastResult, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

// Demo folders component
const DemoFolders = ({ folderPath, setFolderPath, onFolderSelect }) => {
  const [lastResult, setLastResult] = useState(null);
  
  const handleFolderSelect = async () => {
    if (!folderPath.trim()) return;
    
    try {
      const result = await onFolderSelect(folderPath);
      setLastResult(result);
    } catch (error) {
      console.error('Folder selection failed:', error);
    }
  };
  
  return (
    <div className="demo-folders">
      <div className="folders-info">
        <h3>📁 Folder Path Tracking Demo</h3>
        <p>Selected folder paths are automatically stored in encrypted memory with metadata.</p>
      </div>
      
      <div className="folder-input">
        <input
          type="text"
          value={folderPath}
          onChange={(e) => setFolderPath(e.target.value)}
          placeholder="Enter a folder path (e.g., C:\Users\Documents\Projects)"
        />
        <button onClick={handleFolderSelect}>Select & Store</button>
      </div>
      
      {lastResult && (
        <div className="folder-result">
          <h4>Folder Analysis:</h4>
          <div className="folder-details">
            <p><strong>Path:</strong> {lastResult.path}</p>
            <p><strong>Estimated Files:</strong> {lastResult.files}</p>
            <p><strong>Estimated Size:</strong> {lastResult.size} MB</p>
          </div>
        </div>
      )}
    </div>
  );
};

// Demo search component
const DemoSearch = ({ searchQuery, setSearchQuery, searchResults, onSearch }) => {
  return (
    <div className="demo-search">
      <div className="search-info">
        <h3>🔍 Memory Search Demo</h3>
        <p>Search across all stored conversations and messages in encrypted memory.</p>
      </div>
      
      <div className="search-input">
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search conversations, messages, metadata..."
          onKeyPress={(e) => e.key === 'Enter' && onSearch()}
        />
        <button onClick={onSearch}>🔍 Search Memory</button>
      </div>
      
      <div className="search-results">
        {searchResults.length > 0 ? (
          <div className="results-list">
            <h4>Found {searchResults.length} results:</h4>
            {searchResults.map(result => (
              <div key={result.id} className="search-result">
                <div className="result-header">
                  <span className="result-timestamp">{result.timestamp}</span>
                </div>
                <div className="result-content">
                  <div className="result-user"><strong>User:</strong> {result.userMessage}</div>
                  <div className="result-assistant"><strong>Assistant:</strong> {result.assistantResponse.substring(0, 200)}...</div>
                </div>
              </div>
            ))}
          </div>
        ) : searchQuery ? (
          <div className="no-results">No results found for "{searchQuery}"</div>
        ) : (
          <div className="search-help">
            <h4>Search Tips:</h4>
            <ul>
              <li>Search for keywords in messages</li>
              <li>Use quotes for exact phrases</li>
              <li>Search metadata with key:value</li>
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

// Enhanced component with memory integration
const EnhancedDemoComponent = withMemoryIntegration(
  ({ memory, autoSave, downloadFile, memoryStats, isMemoryReady }) => {
    return (
      <div className="enhanced-demo">
        <h3>🚀 Enhanced Component with Memory</h3>
        <p>This component was enhanced using the withMemoryIntegration HOC.</p>
        
        <div className="enhancement-info">
          <p><strong>Memory Ready:</strong> {isMemoryReady ? '✅ Yes' : '❌ No'}</p>
          <p><strong>Total Conversations:</strong> {memoryStats.totalConversations}</p>
          <p><strong>Auto-Save Available:</strong> {autoSave ? '✅ Yes' : '❌ No'}</p>
        </div>
        
        <button onClick={() => downloadFile({ demo: 'enhanced' }, 'enhanced-demo', 'json')}>
          📄 Download Demo Data
        </button>
      </div>
    );
  },
  { autoSave: true, conversationId: 'enhanced-demo' }
);

export default EncryptedMemoryDemo;
export { EnhancedDemoComponent };